/**
 * fn
 * The open source serverless platform.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Fn', 'model/FnList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Fn'), require('../model/FnList'));
  } else {
    // Browser globals (root is window)
    if (!root.FnJs) {
      root.FnJs = {};
    }
    root.FnJs.FnsApi = factory(root.FnJs.ApiClient, root.FnJs.Error, root.FnJs.Fn, root.FnJs.FnList);
  }
}(this, function(ApiClient, Error, Fn, FnList) {
  'use strict';

  /**
   * Fns service.
   * @module api/FnsApi
   * @version 2.0.0
   */

  /**
   * Constructs a new FnsApi. 
   * @alias module:api/FnsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFn operation.
     * @callback module:api/FnsApi~createFnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create A New Function
     * Creates a new Function, returning the complete entity.
     * @param {module:model/Fn} body Function data to insert.
     * @param {module:api/FnsApi~createFnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fn}
     */
    this.createFn = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFn");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Fn;

      return this.apiClient.callApi(
        '/fns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFn operation.
     * @callback module:api/FnsApi~deleteFnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete A Function
     * Delete the specified Function.
     * @param {String} fnID Opaque, unique Function ID.
     * @param {module:api/FnsApi~deleteFnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFn = function(fnID, callback) {
      var postBody = null;

      // verify the required parameter 'fnID' is set
      if (fnID === undefined || fnID === null) {
        throw new Error("Missing the required parameter 'fnID' when calling deleteFn");
      }


      var pathParams = {
        'fnID': fnID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fns/{fnID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFn operation.
     * @callback module:api/FnsApi~getFnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Definition Of A Function
     * Gets the definition for the Function with the specified ID.
     * @param {String} fnID Opaque, unique Function ID.
     * @param {module:api/FnsApi~getFnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fn}
     */
    this.getFn = function(fnID, callback) {
      var postBody = null;

      // verify the required parameter 'fnID' is set
      if (fnID === undefined || fnID === null) {
        throw new Error("Missing the required parameter 'fnID' when calling getFn");
      }


      var pathParams = {
        'fnID': fnID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Fn;

      return this.apiClient.callApi(
        '/fns/{fnID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFns operation.
     * @callback module:api/FnsApi~listFnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get A list Of Functions Within An Application
     * Get a filtered list of Functions for an Application, in alphabetical order.
     * @param {Object} opts Optional parameters
     * @param {String} opts.appId Application ID.
     * @param {String} opts.cursor Cursor from previous response.next_cursor to begin results after, if any.
     * @param {Number} opts.perPage Number of results to return, defaults to 30. Max of 100.
     * @param {String} opts.name Function name to filter by
     * @param {module:api/FnsApi~listFnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FnList}
     */
    this.listFns = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'app_id': opts['appId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FnList;

      return this.apiClient.callApi(
        '/fns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFn operation.
     * @callback module:api/FnsApi~updateFnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update A Function
     * Updates a Function via merging the provided values.
     * @param {String} fnID Opaque, unique Function ID.
     * @param {module:model/Fn} body Function data to merge with current values.
     * @param {module:api/FnsApi~updateFnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fn}
     */
    this.updateFn = function(fnID, body, callback) {
      var postBody = body;

      // verify the required parameter 'fnID' is set
      if (fnID === undefined || fnID === null) {
        throw new Error("Missing the required parameter 'fnID' when calling updateFn");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFn");
      }


      var pathParams = {
        'fnID': fnID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Fn;

      return this.apiClient.callApi(
        '/fns/{fnID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
