/**
 * fn
 * The open source serverless platform.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Log'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Log'));
  } else {
    // Browser globals (root is window)
    if (!root.FnJs) {
      root.FnJs = {};
    }
    root.FnJs.LogApi = factory(root.FnJs.ApiClient, root.FnJs.Error, root.FnJs.Log);
  }
}(this, function(ApiClient, Error, Log) {
  'use strict';

  /**
   * Log service.
   * @module api/LogApi
   * @version 2.0.0
   */

  /**
   * Constructs a new LogApi. 
   * @alias module:api/LogApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCallLogs operation.
     * @callback module:api/LogApi~getCallLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs for a call.
     * Get logs for a call.
     * @param {String} fnID Opaque, unique Function ID.
     * @param {String} callID Opaque, unique Call ID.
     * @param {module:api/LogApi~getCallLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    this.getCallLogs = function(fnID, callID, callback) {
      var postBody = null;

      // verify the required parameter 'fnID' is set
      if (fnID === undefined || fnID === null) {
        throw new Error("Missing the required parameter 'fnID' when calling getCallLogs");
      }

      // verify the required parameter 'callID' is set
      if (callID === undefined || callID === null) {
        throw new Error("Missing the required parameter 'callID' when calling getCallLogs");
      }


      var pathParams = {
        'fnID': fnID,
        'callID': callID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Log;

      return this.apiClient.callApi(
        '/fns/{fnID}/calls/{callID}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
